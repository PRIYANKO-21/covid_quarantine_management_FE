{"ast":null,"code":"var _jsxFileName = \"/home/biswad/Hospital-App-Frontend/src/components/viewEHR.js\";\nimport React, { Component, useState } from \"react\";\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { withRouter } from \"react-router\";\nimport { isAccordionItemSelected } from \"react-bootstrap/esm/AccordionContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ViewEHR extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      record: {},\n      pid: '',\n      cid: ''\n    };\n  }\n\n  getCookie(cName) {\n    const name = cName + \"=\";\n    const cDecoded = decodeURIComponent(document.cookie); //to be careful\n\n    const cArr = cDecoded.split('; ');\n    let res;\n    cArr.forEach(val => {\n      if (val.indexOf(name) === 0) res = val.substring(name.length);\n    });\n    return res;\n  }\n\n  componentDidMount() {\n    console.log(\"Calling\");\n    const token = this.getCookie('doctor_cookie');\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n    };\n    axios.get('http://localhost:8081/get-ehr/' + this.props.match.params.patientId + '/' + this.props.match.params.consentId, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }) // .then(response => \n    //   {\n    //     console.log(response);\n    //     this.setState({pid:this.props.match.params.patientId,cid:this.props.match.params.consentId})\n    //     this.setState({records: response.data});\n    //   }\n    // )\n    .then(response => {\n      this.setState({\n        record: response.data\n      });\n      console.log(this.state.record.episodesDTOList);\n    });\n  }\n\n  render() {\n    const {\n      match,\n      location,\n      history\n    } = this.props; //var { record } = this.state;\n\n    console.log(\"Params\" + this.props.match.params.patientId); //console.log(record)\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.record.episodesDTOList.map(_ref => {\n        let {\n          encounters,\n          episodeId,\n          episodeName\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Episodes:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"episodes\",\n            children: [\"Episode Id : \", episodeId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"episodes\",\n            children: [\"Episode Name : \", episodeName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 35\n          }, this), encounters.map(_ref2 => {\n            let {\n              doctorName,\n              encounterId,\n              op_records\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"episodes\",\n                children: \"Encounters :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 38\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-6\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"form-check-input\",\n                    type: \"checkbox\",\n                    name: \"languages\",\n                    value: [episodeId, encounterId],\n                    id: \"flexCheckDefault\",\n                    onClick: handleChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"encounter\",\n                children: [\"Doctor Name : \", doctorName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 38\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"encounter\",\n                children: [\"Encounter Id : \", encounterId]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 38\n              }, this), op_records.map(_ref3 => {\n                let {\n                  diagnosis,\n                  op_record_id,\n                  record_details,\n                  timestamp\n                } = _ref3;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"encounter\",\n                    children: \"OpRecords:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 47\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"op_records\",\n                    children: [\"Diagnosis : \", diagnosis]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 47\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"op_records\",\n                    children: [\"Op Record Id : \", op_record_id]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 47\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"op_records\",\n                    children: [\"Complaints : \", record_details.complaints]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 47\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"op_records\",\n                    children: [\"Prescription : \", record_details.prescription]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 47\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 45\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 34\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false);\n  }\n\n}\n\nViewEHR.propTypes = {\n  match: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\nconst CreateConsentWithRouter = withRouter(ViewEHR);\n_c = CreateConsentWithRouter;\nexport default CreateConsentWithRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateConsentWithRouter\");","map":{"version":3,"sources":["/home/biswad/Hospital-App-Frontend/src/components/viewEHR.js"],"names":["React","Component","useState","axios","PropTypes","useParams","withRouter","isAccordionItemSelected","ViewEHR","constructor","props","state","record","pid","cid","getCookie","cName","name","cDecoded","decodeURIComponent","document","cookie","cArr","split","res","forEach","val","indexOf","substring","length","componentDidMount","console","log","token","headers","get","match","params","patientId","consentId","then","response","setState","data","episodesDTOList","render","location","history","map","encounters","episodeId","episodeName","doctorName","encounterId","op_records","handleChange","diagnosis","op_record_id","record_details","timestamp","complaints","prescription","propTypes","object","isRequired","CreateConsentWithRouter"],"mappings":"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","sourcesContent":["import React, {Component, useState} from \"react\";\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { withRouter } from \"react-router\";\nimport { isAccordionItemSelected } from \"react-bootstrap/esm/AccordionContext\";\n\n\nclass ViewEHR extends Component{\n\n    constructor(props){\n        super(props)\n        this.state = {\n          record : {},\n          pid : '',\n          cid : ''\n        }\n      }\n\n      \n\n\nstatic propTypes = {\n    match: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired\n};\n\n   \ngetCookie(cName) {\n    const name = cName + \"=\";\n    const cDecoded = decodeURIComponent(document.cookie); //to be careful\n    const cArr = cDecoded .split('; ');\n    let res;\n    cArr.forEach(val => {\n        if (val.indexOf(name) === 0) res = val.substring(name.length);\n    })\n    return res;\n  }\n    \n componentDidMount(){\n    console.log(\"Calling\")\n    \n        const token = this.getCookie('doctor_cookie');\n        const headers = { \n            \"Content-Type\": \"application/json\" ,\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\"\n        };\n        axios.get('http://localhost:8081/get-ehr/'+this.props.match.params.patientId+'/'+this.props.match.params.consentId,  \n        { \n            headers: {\n            'Authorization': `Bearer ${token}` \n          }  \n        })\n        // .then(response => \n        //   {\n        //     console.log(response);\n        //     this.setState({pid:this.props.match.params.patientId,cid:this.props.match.params.consentId})\n        //     this.setState({records: response.data});\n        //   }\n        // )\n        .then(response => {\n            this.setState({\n            record: response.data    \n            })\n            console.log(this.state.record.episodesDTOList);\n        });\n\n\n\n\n    \n} \n\n    render(){\n        const {match,location,history} = this.props;\n\n        //var { record } = this.state;\n        \n        console.log(\"Params\" + this.props.match.params.patientId);\n        //console.log(record)\n        return(\n            <>\n            {\n                this.state.record.episodesDTOList.map(({encounters , episodeId, episodeName  }) => (\n                        <div>\n                            <h3>Episodes:</h3>\n                                  <li className=\"episodes\">Episode Id : {episodeId}</li>\n                                  <li className=\"episodes\">Episode Name : {episodeName}</li>\n                            {\n                              encounters.map(({doctorName,encounterId,op_records})=>(\n                                 <div>\n                                     <h3 className=\"episodes\">Encounters :</h3>  \n                               \n                      <div className=\"row\">\n                        <div className=\"col-md-6\">\n                            <input\n                              className=\"form-check-input\"\n                              type=\"checkbox\"\n                              name=\"languages\"\n                              value={[episodeId,encounterId]}\n                              id=\"flexCheckDefault\"\n                              onClick={handleChange}\n                            />\n                  </div>\n                </div>\n                                     <li className=\"encounter\">Doctor Name : {doctorName}</li>\n                                     <li className=\"encounter\">Encounter Id : {encounterId}</li>\n                                       \n                                     {\n                                          op_records.map(({diagnosis,op_record_id,record_details,timestamp})=>(\n                                            <div>\n                                              <h3 className=\"encounter\">OpRecords:</h3>\n                                              <li className=\"op_records\">Diagnosis : {diagnosis}</li>\n                                              <li className=\"op_records\">Op Record Id : {op_record_id}</li>\n                                              <li className=\"op_records\">Complaints : {record_details.complaints}</li>\n                                              <li className=\"op_records\">Prescription : {record_details.prescription}</li>                                      \n                                            </div>\n                                          ))\n                                  }\n                                  </div>\n                              ))\n                          }\n                        </div>\n                      ))\n               }\n               </>\n\n        )\n    }\n}\nconst CreateConsentWithRouter = withRouter(ViewEHR);\nexport default CreateConsentWithRouter;"]},"metadata":{},"sourceType":"module"}